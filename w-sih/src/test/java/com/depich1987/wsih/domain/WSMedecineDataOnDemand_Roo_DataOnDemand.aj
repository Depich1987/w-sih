// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.depich1987.wsih.domain;

import com.depich1987.wsih.domain.WSMedecine;
import com.depich1987.wsih.domain.WSMedecineDataOnDemand;
import com.depich1987.wsih.domain.WSMedecineTypeDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect WSMedecineDataOnDemand_Roo_DataOnDemand {
    
    declare @type: WSMedecineDataOnDemand: @Component;
    
    private Random WSMedecineDataOnDemand.rnd = new SecureRandom();
    
    private List<WSMedecine> WSMedecineDataOnDemand.data;
    
    @Autowired
    WSMedecineTypeDataOnDemand WSMedecineDataOnDemand.wSMedecineTypeDataOnDemand;
    
    public WSMedecine WSMedecineDataOnDemand.getNewTransientWSMedecine(int index) {
        WSMedecine obj = new WSMedecine();
        setCreatedBy(obj, index);
        setCreationDate(obj, index);
        setCurrentStock(obj, index);
        setLowerQuantity(obj, index);
        setName(obj, index);
        return obj;
    }
    
    public void WSMedecineDataOnDemand.setCreatedBy(WSMedecine obj, int index) {
        String createdBy = "createdBy_" + index;
        obj.setCreatedBy(createdBy);
    }
    
    public void WSMedecineDataOnDemand.setCreationDate(WSMedecine obj, int index) {
        Date creationDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreationDate(creationDate);
    }
    
    public void WSMedecineDataOnDemand.setCurrentStock(WSMedecine obj, int index) {
        Long currentStock = new Integer(index).longValue();
        obj.setCurrentStock(currentStock);
    }
    
    public void WSMedecineDataOnDemand.setLowerQuantity(WSMedecine obj, int index) {
        Long lowerQuantity = new Integer(index).longValue();
        obj.setLowerQuantity(lowerQuantity);
    }
    
    public void WSMedecineDataOnDemand.setName(WSMedecine obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public WSMedecine WSMedecineDataOnDemand.getSpecificWSMedecine(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        WSMedecine obj = data.get(index);
        Long id = obj.getId();
        return WSMedecine.findWSMedecine(id);
    }
    
    public WSMedecine WSMedecineDataOnDemand.getRandomWSMedecine() {
        init();
        WSMedecine obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return WSMedecine.findWSMedecine(id);
    }
    
    public boolean WSMedecineDataOnDemand.modifyWSMedecine(WSMedecine obj) {
        return false;
    }
    
    public void WSMedecineDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = WSMedecine.findWSMedecineEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'WSMedecine' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<WSMedecine>();
        for (int i = 0; i < 10; i++) {
            WSMedecine obj = getNewTransientWSMedecine(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
